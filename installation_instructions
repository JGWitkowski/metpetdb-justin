INSTUCTIONS: (I am using ubuntu, mainly because the metpetdb server is on Ubuntu and it is slightly easier to understand) 

#install python 2.7.3
sudo apt-get install python2.7

#install pip if you dont already have it
sudo apt-get install python-pip

#install django (check out django official documentation for issues - https://www.djangoproject.com/)
sudo pip install Django

#check if it installed by typing the command
#it must return the version installed (1.4.2)
python -c "import django; print(django.get_version())"

# Install postgresql (ver 9.1) by typing the following command on the terminal
#--> installs ver 9.1.7 by default
sudo apt-get install postgresql

#set the config files by going into the following directory
cd /etc/postgresql/9.1/main

#Update 'pg_hba.conf' file to authenticate connections: (you may have to use chmod 777 to set access rights and save the updated conf file)
# Database administrative login by Unix domain socket
local   all             postgres                                peer
local	all		postgres				md5

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     md5
# IPv4 local connections:
host    all             all             128.213.23.26/32        md5
host	all		all		192.168.1.32/32		md5
host	all		all		127.0.0.1		md5

# IPv6 local connections:
host    all             all             ::1/128                 md5
# Allow replication connections from localhost, by a user with the
# replication privilege.
#local   replication     postgres                                peer
#host    replication     postgres        127.0.0.1/32            md5
#host    replication     postgres        ::1/128                 md5


#edit the postgresql.conf file (in the same folder as pg_hba)
#change listen_address to allow remote connections
changed from the default which is localhost to 
listen_addresses = '*'          # what IP address(es) to listen on;


#stop the server to be sure it isnt running and start it 
cd /etc/postgresql/9.1/main
sudo /etc/init.d/postgresql stop
sudo /etc/init.d/postgresql start

# set postgres username/password by going to the postgres intereactive frontend psql(be careful with password since it cannot be retrived, it can only be reset)
sudo -u postgres psql template1
\password postgres

#create a new user metpetdb and set the password
CREATE ROLE metpetdb INHERIT LOGIN CREATEDB PASSWORD 'metpetdb';
\q

# register the procedural language plpgsql to implement the stored procedures
#most likely it will already be there
createlang plpgsql

#Install postgis - extension for PostgreSQL which has many geometry types.
#Before we begin, you should uninstall your existing postgis packages:
sudo dpkg --purge postgis postgresql-9.1-postgis

#Then add a new repository and install PostGIS from there: you need GEOS, GDAL & PROJ4 libraries before installing PostGIS
# refer http://postgis.refractions.net/documentation/ in case of issues
sudo apt-add-repository ppa:sharpie/for-science  # To get GEOS 3.3.2 
sudo apt-add-repository ppa:sharpie/postgis-nightly
sudo apt-get install postgresql-9.1-postgis

#Create a PostGIS template on postgres
#cd into the correct directory to see if the file is available
createdb -E UTF8 template_postgis
createlang -d template_postgis plpgsql
psql -d postgres -c "UPDATE pg_database SET datistemplate='true' WHERE datname='template_postgis'"
psql -d template_postgis -f /usr/share/postgresql/9.1/contrib/postgis-1.5/postgis.sql
psql -d template_postgis -f /usr/share/postgresql/9.1/contrib/postgis-1.5/spatial_ref_sys.sql
psql -d template_postgis -c "GRANT ALL ON geometry_columns TO PUBLIC;"
psql -d template_postgis -c "GRANT ALL ON geography_columns TO PUBLIC;"
psql -d template_postgis -c "GRANT ALL ON spatial_ref_sys TO PUBLIC;"

# create the DB metpetdb from the postgis template
createdb metpetdb -T template_postgis2

#change ownership -- you can do this via pgAdmin as well 
#install pgAdmin3 from the software center
ALTER DATABASE metpetdb OWNER TO metpetdb;
alter view raster_overviews OWNER TO metpetdb;
alter view geometry_columns OWNER TO metpetdb;
alter view geography_columns OWNER TO metpetdb;
alter table spatial_ref_sys OWNER TO metpetdb;

#Get the dump(mpdb_test) with the postGIS fix 
#Note that this has already fixed the library issue for version 1.5 (assuming that your postgis library is at:
/usr/lib/postgis/1.5.3/postgres/9.1/lib/postgis-1.5.so
http://www.cs.rpi.edu/~sibel/transfer/test_sed_jan23_2013.dmp.gz 

#Not required but the stable dump with the PostGIS1.5 fix can be found here
#Note that this has already fixed the library issue for version 1.5 (assuming that your postgis library is at:
#/usr/lib/postgis/1.5.3/postgres/9.1/lib/postgis-1.5.so
http://www.cs.rpi.edu/~sibel/transfer/stable_sed.dmp.gz 

#If not, you should get the original at:
http://www.cs.rpi.edu/~sibel/transfer/stable.dmp.gz

#and fix the dump yourself by running the command:
sed stable.dmp -e 's_/software/postgis-1.2.0-0/pkg/lib/liblwgeom.so.1_/usr/lib/postgis/1.5.3/postgres/9.1/lib/postgis-1.5.so_' > stable_sed.dmp

#import the dump into the database metpetdb
cat test_sed_jan23_2013.dmp  | psql -U metpetdb -dmetpetdb

#install postgresql adapter: psycopg
sudo pip install psycopg2 <or> sudo easy_install psycopg2
(Your system must be able to compile a C Python extension against the libpq library: you will probably need python-dev and libpq-dev packages.
The pg_config must be available in your path, or alternatively you must specify its full path in the setup.cfg file.)

#start django project
django-admin.py startproject metpetdb

#to run on particular port number (local)
python manage.py runserver 8080 

#setup the database
/metpetdb/settings.py
engine: django.db.backends.postgresql_psycopg2
name: metpetdb
user: metpetdb
password: metpetdb
host:

#create app
python manage.py startapp webservices

#add app to settings.py/metpetdb/settings.py under INSTALLED_APPS

#if interested check out the existing webservices for faceted search from Git
#https://github.com/metpetdb/metpetdb-py
# documentation regarding this is here https://github.com/metpetdb/metpetdb-py/tree/master/docs

#if you want to have them running, so an svn checkout or Git pull
# you may have to set up svn repository (refer: https://help.ubuntu.com/community/Subversion)
#write models or generate with
python mysite/manage.py inspectdb > mysite/myapp/models.py

#update models
- rearrange classes
- add related_names (if required)

#check SQL and validate
python manage.py sql webservices
python manage.py validate

#create views
#set urls inside metpetdb/urls.py

#Run the webservices on your development server with the following command:
python manage.py runserver
